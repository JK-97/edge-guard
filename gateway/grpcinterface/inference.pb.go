// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inference.proto

package trueno

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LoadRequest struct {
	Bid                  string   `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
	Btype                string   `protobuf:"bytes,2,opt,name=btype,proto3" json:"btype,omitempty"`
	Model                string   `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Mode                 string   `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Encrypted            uint32   `protobuf:"varint,6,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	A64Key               string   `protobuf:"bytes,7,opt,name=a64key,proto3" json:"a64key,omitempty"`
	Pvtpth               string   `protobuf:"bytes,8,opt,name=pvtpth,proto3" json:"pvtpth,omitempty"`
	Extra                string   `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadRequest) Reset()         { *m = LoadRequest{} }
func (m *LoadRequest) String() string { return proto.CompactTextString(m) }
func (*LoadRequest) ProtoMessage()    {}
func (*LoadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71717a2886e37ec6, []int{0}
}

func (m *LoadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadRequest.Unmarshal(m, b)
}
func (m *LoadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadRequest.Marshal(b, m, deterministic)
}
func (m *LoadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadRequest.Merge(m, src)
}
func (m *LoadRequest) XXX_Size() int {
	return xxx_messageInfo_LoadRequest.Size(m)
}
func (m *LoadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadRequest proto.InternalMessageInfo

func (m *LoadRequest) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *LoadRequest) GetBtype() string {
	if m != nil {
		return m.Btype
	}
	return ""
}

func (m *LoadRequest) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *LoadRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LoadRequest) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *LoadRequest) GetEncrypted() uint32 {
	if m != nil {
		return m.Encrypted
	}
	return 0
}

func (m *LoadRequest) GetA64Key() string {
	if m != nil {
		return m.A64Key
	}
	return ""
}

func (m *LoadRequest) GetPvtpth() string {
	if m != nil {
		return m.Pvtpth
	}
	return ""
}

func (m *LoadRequest) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type InferRequest struct {
	Bid                  string   `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Base64               string   `protobuf:"bytes,5,opt,name=base64,proto3" json:"base64,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InferRequest) Reset()         { *m = InferRequest{} }
func (m *InferRequest) String() string { return proto.CompactTextString(m) }
func (*InferRequest) ProtoMessage()    {}
func (*InferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71717a2886e37ec6, []int{1}
}

func (m *InferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InferRequest.Unmarshal(m, b)
}
func (m *InferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InferRequest.Marshal(b, m, deterministic)
}
func (m *InferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferRequest.Merge(m, src)
}
func (m *InferRequest) XXX_Size() int {
	return xxx_messageInfo_InferRequest.Size(m)
}
func (m *InferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InferRequest proto.InternalMessageInfo

func (m *InferRequest) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *InferRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *InferRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *InferRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InferRequest) GetBase64() string {
	if m != nil {
		return m.Base64
	}
	return ""
}

func init() {
	proto.RegisterType((*LoadRequest)(nil), "trueno.LoadRequest")
	proto.RegisterType((*InferRequest)(nil), "trueno.InferRequest")
}

func init() { proto.RegisterFile("inference.proto", fileDescriptor_71717a2886e37ec6) }

var fileDescriptor_71717a2886e37ec6 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xbf, 0xf4, 0x4f, 0xfa, 0xe5, 0xb6, 0x50, 0x64, 0x2a, 0x64, 0x55, 0x0c, 0x55, 0xa7,
	0x4e, 0x1d, 0xa0, 0xaa, 0xc4, 0x00, 0x02, 0x31, 0x55, 0x2a, 0x8b, 0xdf, 0xc0, 0x49, 0x2e, 0x6a,
	0x44, 0x62, 0x1b, 0xc7, 0xa9, 0xc8, 0x13, 0xf0, 0x94, 0xbc, 0x0b, 0xb2, 0x9d, 0x86, 0x2e, 0x1d,
	0x60, 0x3b, 0xe7, 0x27, 0x1f, 0xe9, 0x9e, 0x93, 0xc0, 0x38, 0x13, 0xaf, 0xa8, 0x51, 0x24, 0xb8,
	0x54, 0x5a, 0x1a, 0x49, 0x42, 0xa3, 0x2b, 0x14, 0x72, 0x3a, 0x4a, 0x64, 0x51, 0x48, 0xe1, 0xe9,
	0xfc, 0x2b, 0x80, 0xe1, 0x56, 0xf2, 0x94, 0xe1, 0x7b, 0x85, 0xa5, 0x21, 0x17, 0xd0, 0x8d, 0xb3,
	0x94, 0x06, 0xb3, 0x60, 0x11, 0x31, 0x2b, 0xc9, 0x04, 0xfa, 0xb1, 0xa9, 0x15, 0xd2, 0x8e, 0x63,
	0xde, 0x58, 0x5a, 0xc8, 0x14, 0x73, 0xda, 0xf5, 0xd4, 0x19, 0x42, 0x61, 0xb0, 0x47, 0x5d, 0x66,
	0x52, 0xd0, 0x9e, 0xe3, 0x07, 0x4b, 0x08, 0xf4, 0xec, 0x13, 0xda, 0x77, 0xd8, 0x69, 0x72, 0x0d,
	0x11, 0x8a, 0x44, 0xd7, 0xca, 0x60, 0x4a, 0xc3, 0x59, 0xb0, 0x38, 0x63, 0x3f, 0x80, 0x5c, 0x41,
	0xc8, 0xd7, 0xab, 0x37, 0xac, 0xe9, 0xc0, 0x65, 0x1a, 0x67, 0xb9, 0xda, 0x1b, 0x65, 0x76, 0xf4,
	0xbf, 0xe7, 0xde, 0xd9, 0x8b, 0xf0, 0xc3, 0x68, 0x4e, 0x23, 0x7f, 0x91, 0x33, 0x73, 0x03, 0xa3,
	0x8d, 0x1d, 0xe2, 0x74, 0x3f, 0x02, 0xbd, 0xaa, 0xca, 0xd2, 0xa6, 0x9e, 0xd3, 0x96, 0x29, 0x6e,
	0x76, 0x4d, 0x39, 0xa7, 0x2d, 0x73, 0x33, 0xf8, 0x62, 0x4e, 0xdb, 0x5b, 0x62, 0x5e, 0xe2, 0x7a,
	0xd5, 0xf4, 0x6a, 0xdc, 0xcd, 0x67, 0x07, 0xa2, 0xcd, 0x61, 0x7f, 0xf2, 0x08, 0xe4, 0x59, 0x23,
	0x37, 0xf8, 0x24, 0x52, 0xbb, 0xf5, 0x8b, 0xdb, 0xea, 0x72, 0xe9, 0x3f, 0xc8, 0xf2, 0x68, 0xfe,
	0x69, 0x0b, 0x19, 0x96, 0x55, 0x6e, 0x18, 0xaa, 0xbc, 0x9e, 0xff, 0x23, 0x77, 0x30, 0x64, 0x98,
	0xff, 0x29, 0x7a, 0x0f, 0xe7, 0xed, 0x25, 0x5b, 0x99, 0xf0, 0x9c, 0x4c, 0x0e, 0x0f, 0x8f, 0x87,
	0x39, 0x15, 0x7f, 0x80, 0x71, 0x1b, 0x67, 0x58, 0x48, 0x83, 0xbf, 0xca, 0xc7, 0xa1, 0xfb, 0xcd,
	0x6e, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x92, 0xfc, 0x4a, 0x77, 0x8f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InferenceClient is the client API for Inference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InferenceClient interface {
	CreateAndLoadModel(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*ResultReply, error)
	ReloadModel(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*ResultReply, error)
	InferenceLocal(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*ResultReply, error)
	InferenceRemote(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*ResultReply, error)
}

type inferenceClient struct {
	cc *grpc.ClientConn
}

func NewInferenceClient(cc *grpc.ClientConn) InferenceClient {
	return &inferenceClient{cc}
}

func (c *inferenceClient) CreateAndLoadModel(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/trueno.Inference/CreateAndLoadModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceClient) ReloadModel(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/trueno.Inference/ReloadModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceClient) InferenceLocal(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/trueno.Inference/InferenceLocal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceClient) InferenceRemote(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/trueno.Inference/InferenceRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InferenceServer is the server API for Inference service.
type InferenceServer interface {
	CreateAndLoadModel(context.Context, *LoadRequest) (*ResultReply, error)
	ReloadModel(context.Context, *LoadRequest) (*ResultReply, error)
	InferenceLocal(context.Context, *InferRequest) (*ResultReply, error)
	InferenceRemote(context.Context, *InferRequest) (*ResultReply, error)
}

// UnimplementedInferenceServer can be embedded to have forward compatible implementations.
type UnimplementedInferenceServer struct {
}

func (*UnimplementedInferenceServer) CreateAndLoadModel(ctx context.Context, req *LoadRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndLoadModel not implemented")
}
func (*UnimplementedInferenceServer) ReloadModel(ctx context.Context, req *LoadRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadModel not implemented")
}
func (*UnimplementedInferenceServer) InferenceLocal(ctx context.Context, req *InferRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceLocal not implemented")
}
func (*UnimplementedInferenceServer) InferenceRemote(ctx context.Context, req *InferRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceRemote not implemented")
}

func RegisterInferenceServer(s *grpc.Server, srv InferenceServer) {
	s.RegisterService(&_Inference_serviceDesc, srv)
}

func _Inference_CreateAndLoadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).CreateAndLoadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trueno.Inference/CreateAndLoadModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).CreateAndLoadModel(ctx, req.(*LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inference_ReloadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).ReloadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trueno.Inference/ReloadModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).ReloadModel(ctx, req.(*LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inference_InferenceLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).InferenceLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trueno.Inference/InferenceLocal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).InferenceLocal(ctx, req.(*InferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inference_InferenceRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).InferenceRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trueno.Inference/InferenceRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).InferenceRemote(ctx, req.(*InferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inference_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trueno.Inference",
	HandlerType: (*InferenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAndLoadModel",
			Handler:    _Inference_CreateAndLoadModel_Handler,
		},
		{
			MethodName: "ReloadModel",
			Handler:    _Inference_ReloadModel_Handler,
		},
		{
			MethodName: "InferenceLocal",
			Handler:    _Inference_InferenceLocal_Handler,
		},
		{
			MethodName: "InferenceRemote",
			Handler:    _Inference_InferenceRemote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference.proto",
}
